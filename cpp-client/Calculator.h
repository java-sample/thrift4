/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculator_H
#define Calculator_H

#include <thrift/TDispatchProcessor.h>
#include "calculator_types.h"

namespace example {

class CalculatorIf {
 public:
  virtual ~CalculatorIf() {}
  virtual int32_t getCount() = 0;
  virtual void setNum(const int32_t num) = 0;
  virtual int32_t getNum() = 0;
  virtual int64_t add(const int32_t num1, const int32_t num2) = 0;
  virtual void hello2(std::string& _return, const int64_t num) = 0;
  virtual void binfun(std::string& _return) = 0;
  virtual void structfun(ExampleStructure& _return) = 0;
  virtual void listfun(std::vector<int64_t> & _return) = 0;
};

class CalculatorIfFactory {
 public:
  typedef CalculatorIf Handler;

  virtual ~CalculatorIfFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculatorIf* /* handler */) = 0;
};

class CalculatorIfSingletonFactory : virtual public CalculatorIfFactory {
 public:
  CalculatorIfSingletonFactory(const boost::shared_ptr<CalculatorIf>& iface) : iface_(iface) {}
  virtual ~CalculatorIfSingletonFactory() {}

  virtual CalculatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalculatorIf> iface_;
};

class CalculatorNull : virtual public CalculatorIf {
 public:
  virtual ~CalculatorNull() {}
  int32_t getCount() {
    int32_t _return = 0;
    return _return;
  }
  void setNum(const int32_t /* num */) {
    return;
  }
  int32_t getNum() {
    int32_t _return = 0;
    return _return;
  }
  int64_t add(const int32_t /* num1 */, const int32_t /* num2 */) {
    int64_t _return = 0;
    return _return;
  }
  void hello2(std::string& /* _return */, const int64_t /* num */) {
    return;
  }
  void binfun(std::string& /* _return */) {
    return;
  }
  void structfun(ExampleStructure& /* _return */) {
    return;
  }
  void listfun(std::vector<int64_t> & /* _return */) {
    return;
  }
};


class Calculator_getCount_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Calculator_getCount_args(const Calculator_getCount_args&);
  Calculator_getCount_args& operator=(const Calculator_getCount_args&);
  Calculator_getCount_args() {
  }

  virtual ~Calculator_getCount_args() throw();

  bool operator == (const Calculator_getCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_getCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_getCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getCount_args& obj);
};


class Calculator_getCount_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Calculator_getCount_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getCount_pargs& obj);
};

typedef struct _Calculator_getCount_result__isset {
  _Calculator_getCount_result__isset() : success(false) {}
  bool success :1;
} _Calculator_getCount_result__isset;

class Calculator_getCount_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Calculator_getCount_result(const Calculator_getCount_result&);
  Calculator_getCount_result& operator=(const Calculator_getCount_result&);
  Calculator_getCount_result() : success(0) {
  }

  virtual ~Calculator_getCount_result() throw();
  int32_t success;

  _Calculator_getCount_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Calculator_getCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_getCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_getCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getCount_result& obj);
};

typedef struct _Calculator_getCount_presult__isset {
  _Calculator_getCount_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_getCount_presult__isset;

class Calculator_getCount_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Calculator_getCount_presult() throw();
  int32_t* success;

  _Calculator_getCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getCount_presult& obj);
};

typedef struct _Calculator_setNum_args__isset {
  _Calculator_setNum_args__isset() : num(false) {}
  bool num :1;
} _Calculator_setNum_args__isset;

class Calculator_setNum_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  Calculator_setNum_args(const Calculator_setNum_args&);
  Calculator_setNum_args& operator=(const Calculator_setNum_args&);
  Calculator_setNum_args() : num(0) {
  }

  virtual ~Calculator_setNum_args() throw();
  int32_t num;

  _Calculator_setNum_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const Calculator_setNum_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Calculator_setNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_setNum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_setNum_args& obj);
};


class Calculator_setNum_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~Calculator_setNum_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_setNum_pargs& obj);
};


class Calculator_setNum_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Calculator_setNum_result(const Calculator_setNum_result&);
  Calculator_setNum_result& operator=(const Calculator_setNum_result&);
  Calculator_setNum_result() {
  }

  virtual ~Calculator_setNum_result() throw();

  bool operator == (const Calculator_setNum_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_setNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_setNum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_setNum_result& obj);
};


class Calculator_setNum_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Calculator_setNum_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_setNum_presult& obj);
};


class Calculator_getNum_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Calculator_getNum_args(const Calculator_getNum_args&);
  Calculator_getNum_args& operator=(const Calculator_getNum_args&);
  Calculator_getNum_args() {
  }

  virtual ~Calculator_getNum_args() throw();

  bool operator == (const Calculator_getNum_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_getNum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_getNum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getNum_args& obj);
};


class Calculator_getNum_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Calculator_getNum_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getNum_pargs& obj);
};

typedef struct _Calculator_getNum_result__isset {
  _Calculator_getNum_result__isset() : success(false) {}
  bool success :1;
} _Calculator_getNum_result__isset;

class Calculator_getNum_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  Calculator_getNum_result(const Calculator_getNum_result&);
  Calculator_getNum_result& operator=(const Calculator_getNum_result&);
  Calculator_getNum_result() : success(0) {
  }

  virtual ~Calculator_getNum_result() throw();
  int32_t success;

  _Calculator_getNum_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const Calculator_getNum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_getNum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_getNum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getNum_result& obj);
};

typedef struct _Calculator_getNum_presult__isset {
  _Calculator_getNum_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_getNum_presult__isset;

class Calculator_getNum_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~Calculator_getNum_presult() throw();
  int32_t* success;

  _Calculator_getNum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_getNum_presult& obj);
};

typedef struct _Calculator_add_args__isset {
  _Calculator_add_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Calculator_add_args__isset;

class Calculator_add_args {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Calculator_add_args(const Calculator_add_args&);
  Calculator_add_args& operator=(const Calculator_add_args&);
  Calculator_add_args() : num1(0), num2(0) {
  }

  virtual ~Calculator_add_args() throw();
  int32_t num1;
  int32_t num2;

  _Calculator_add_args__isset __isset;

  void __set_num1(const int32_t val);

  void __set_num2(const int32_t val);

  bool operator == (const Calculator_add_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Calculator_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_add_args& obj);
};


class Calculator_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};


  virtual ~Calculator_add_pargs() throw();
  const int32_t* num1;
  const int32_t* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_add_pargs& obj);
};

typedef struct _Calculator_add_result__isset {
  _Calculator_add_result__isset() : success(false) {}
  bool success :1;
} _Calculator_add_result__isset;

class Calculator_add_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  Calculator_add_result(const Calculator_add_result&);
  Calculator_add_result& operator=(const Calculator_add_result&);
  Calculator_add_result() : success(0) {
  }

  virtual ~Calculator_add_result() throw();
  int64_t success;

  _Calculator_add_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Calculator_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_add_result& obj);
};

typedef struct _Calculator_add_presult__isset {
  _Calculator_add_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_add_presult__isset;

class Calculator_add_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~Calculator_add_presult() throw();
  int64_t* success;

  _Calculator_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_add_presult& obj);
};

typedef struct _Calculator_hello2_args__isset {
  _Calculator_hello2_args__isset() : num(false) {}
  bool num :1;
} _Calculator_hello2_args__isset;

class Calculator_hello2_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  Calculator_hello2_args(const Calculator_hello2_args&);
  Calculator_hello2_args& operator=(const Calculator_hello2_args&);
  Calculator_hello2_args() : num(0) {
  }

  virtual ~Calculator_hello2_args() throw();
  int64_t num;

  _Calculator_hello2_args__isset __isset;

  void __set_num(const int64_t val);

  bool operator == (const Calculator_hello2_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Calculator_hello2_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_hello2_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_hello2_args& obj);
};


class Calculator_hello2_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~Calculator_hello2_pargs() throw();
  const int64_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_hello2_pargs& obj);
};

typedef struct _Calculator_hello2_result__isset {
  _Calculator_hello2_result__isset() : success(false) {}
  bool success :1;
} _Calculator_hello2_result__isset;

class Calculator_hello2_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  Calculator_hello2_result(const Calculator_hello2_result&);
  Calculator_hello2_result& operator=(const Calculator_hello2_result&);
  Calculator_hello2_result() : success() {
  }

  virtual ~Calculator_hello2_result() throw();
  std::string success;

  _Calculator_hello2_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Calculator_hello2_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_hello2_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_hello2_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_hello2_result& obj);
};

typedef struct _Calculator_hello2_presult__isset {
  _Calculator_hello2_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_hello2_presult__isset;

class Calculator_hello2_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~Calculator_hello2_presult() throw();
  std::string* success;

  _Calculator_hello2_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_hello2_presult& obj);
};


class Calculator_binfun_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Calculator_binfun_args(const Calculator_binfun_args&);
  Calculator_binfun_args& operator=(const Calculator_binfun_args&);
  Calculator_binfun_args() {
  }

  virtual ~Calculator_binfun_args() throw();

  bool operator == (const Calculator_binfun_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_binfun_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_binfun_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_binfun_args& obj);
};


class Calculator_binfun_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Calculator_binfun_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_binfun_pargs& obj);
};

typedef struct _Calculator_binfun_result__isset {
  _Calculator_binfun_result__isset() : success(false) {}
  bool success :1;
} _Calculator_binfun_result__isset;

class Calculator_binfun_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  Calculator_binfun_result(const Calculator_binfun_result&);
  Calculator_binfun_result& operator=(const Calculator_binfun_result&);
  Calculator_binfun_result() : success() {
  }

  virtual ~Calculator_binfun_result() throw();
  std::string success;

  _Calculator_binfun_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const Calculator_binfun_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_binfun_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_binfun_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_binfun_result& obj);
};

typedef struct _Calculator_binfun_presult__isset {
  _Calculator_binfun_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_binfun_presult__isset;

class Calculator_binfun_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~Calculator_binfun_presult() throw();
  std::string* success;

  _Calculator_binfun_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_binfun_presult& obj);
};


class Calculator_structfun_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Calculator_structfun_args(const Calculator_structfun_args&);
  Calculator_structfun_args& operator=(const Calculator_structfun_args&);
  Calculator_structfun_args() {
  }

  virtual ~Calculator_structfun_args() throw();

  bool operator == (const Calculator_structfun_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_structfun_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_structfun_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_structfun_args& obj);
};


class Calculator_structfun_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Calculator_structfun_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_structfun_pargs& obj);
};

typedef struct _Calculator_structfun_result__isset {
  _Calculator_structfun_result__isset() : success(false) {}
  bool success :1;
} _Calculator_structfun_result__isset;

class Calculator_structfun_result {
 public:

  static const char* ascii_fingerprint; // = "0B00C6A32956D0FB910392C197F6E622";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x00,0xC6,0xA3,0x29,0x56,0xD0,0xFB,0x91,0x03,0x92,0xC1,0x97,0xF6,0xE6,0x22};

  Calculator_structfun_result(const Calculator_structfun_result&);
  Calculator_structfun_result& operator=(const Calculator_structfun_result&);
  Calculator_structfun_result() {
  }

  virtual ~Calculator_structfun_result() throw();
  ExampleStructure success;

  _Calculator_structfun_result__isset __isset;

  void __set_success(const ExampleStructure& val);

  bool operator == (const Calculator_structfun_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_structfun_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_structfun_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_structfun_result& obj);
};

typedef struct _Calculator_structfun_presult__isset {
  _Calculator_structfun_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_structfun_presult__isset;

class Calculator_structfun_presult {
 public:

  static const char* ascii_fingerprint; // = "0B00C6A32956D0FB910392C197F6E622";
  static const uint8_t binary_fingerprint[16]; // = {0x0B,0x00,0xC6,0xA3,0x29,0x56,0xD0,0xFB,0x91,0x03,0x92,0xC1,0x97,0xF6,0xE6,0x22};


  virtual ~Calculator_structfun_presult() throw();
  ExampleStructure* success;

  _Calculator_structfun_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_structfun_presult& obj);
};


class Calculator_listfun_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  Calculator_listfun_args(const Calculator_listfun_args&);
  Calculator_listfun_args& operator=(const Calculator_listfun_args&);
  Calculator_listfun_args() {
  }

  virtual ~Calculator_listfun_args() throw();

  bool operator == (const Calculator_listfun_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculator_listfun_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_listfun_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_listfun_args& obj);
};


class Calculator_listfun_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~Calculator_listfun_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_listfun_pargs& obj);
};

typedef struct _Calculator_listfun_result__isset {
  _Calculator_listfun_result__isset() : success(false) {}
  bool success :1;
} _Calculator_listfun_result__isset;

class Calculator_listfun_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  Calculator_listfun_result(const Calculator_listfun_result&);
  Calculator_listfun_result& operator=(const Calculator_listfun_result&);
  Calculator_listfun_result() {
  }

  virtual ~Calculator_listfun_result() throw();
  std::vector<int64_t>  success;

  _Calculator_listfun_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const Calculator_listfun_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculator_listfun_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculator_listfun_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Calculator_listfun_result& obj);
};

typedef struct _Calculator_listfun_presult__isset {
  _Calculator_listfun_presult__isset() : success(false) {}
  bool success :1;
} _Calculator_listfun_presult__isset;

class Calculator_listfun_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~Calculator_listfun_presult() throw();
  std::vector<int64_t> * success;

  _Calculator_listfun_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Calculator_listfun_presult& obj);
};

class CalculatorClient : virtual public CalculatorIf {
 public:
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t getCount();
  void send_getCount();
  int32_t recv_getCount();
  void setNum(const int32_t num);
  void send_setNum(const int32_t num);
  void recv_setNum();
  int32_t getNum();
  void send_getNum();
  int32_t recv_getNum();
  int64_t add(const int32_t num1, const int32_t num2);
  void send_add(const int32_t num1, const int32_t num2);
  int64_t recv_add();
  void hello2(std::string& _return, const int64_t num);
  void send_hello2(const int64_t num);
  void recv_hello2(std::string& _return);
  void binfun(std::string& _return);
  void send_binfun();
  void recv_binfun(std::string& _return);
  void structfun(ExampleStructure& _return);
  void send_structfun();
  void recv_structfun(ExampleStructure& _return);
  void listfun(std::vector<int64_t> & _return);
  void send_listfun();
  void recv_listfun(std::vector<int64_t> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalculatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hello2(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_binfun(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_structfun(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_listfun(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculatorProcessor(boost::shared_ptr<CalculatorIf> iface) :
    iface_(iface) {
    processMap_["getCount"] = &CalculatorProcessor::process_getCount;
    processMap_["setNum"] = &CalculatorProcessor::process_setNum;
    processMap_["getNum"] = &CalculatorProcessor::process_getNum;
    processMap_["add"] = &CalculatorProcessor::process_add;
    processMap_["hello2"] = &CalculatorProcessor::process_hello2;
    processMap_["binfun"] = &CalculatorProcessor::process_binfun;
    processMap_["structfun"] = &CalculatorProcessor::process_structfun;
    processMap_["listfun"] = &CalculatorProcessor::process_listfun;
  }

  virtual ~CalculatorProcessor() {}
};

class CalculatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculatorProcessorFactory(const ::boost::shared_ptr< CalculatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalculatorIfFactory > handlerFactory_;
};

class CalculatorMultiface : virtual public CalculatorIf {
 public:
  CalculatorMultiface(std::vector<boost::shared_ptr<CalculatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalculatorIf> > ifaces_;
  CalculatorMultiface() {}
  void add(boost::shared_ptr<CalculatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t getCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCount();
    }
    return ifaces_[i]->getCount();
  }

  void setNum(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setNum(num);
    }
    ifaces_[i]->setNum(num);
  }

  int32_t getNum() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNum();
    }
    return ifaces_[i]->getNum();
  }

  int64_t add(const int32_t num1, const int32_t num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(num1, num2);
    }
    return ifaces_[i]->add(num1, num2);
  }

  void hello2(std::string& _return, const int64_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello2(_return, num);
    }
    ifaces_[i]->hello2(_return, num);
    return;
  }

  void binfun(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->binfun(_return);
    }
    ifaces_[i]->binfun(_return);
    return;
  }

  void structfun(ExampleStructure& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->structfun(_return);
    }
    ifaces_[i]->structfun(_return);
    return;
  }

  void listfun(std::vector<int64_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->listfun(_return);
    }
    ifaces_[i]->listfun(_return);
    return;
  }

};

} // namespace

#endif
